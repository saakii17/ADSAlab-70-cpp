//Implement program to find all distinct subsets of a given set using Bit Masking Approach.  Statement: - Given an array of integers arr[], The task is to find all its subsets. The subset cannot contain duplicate elements, so any repeated subset should be considered only once in the output. 
#include <iostream>
using namespace std;

int main() {
    int n;
    cout << "Enter number of elements: ";
    cin >> n;

    int arr[20]; // assuming max 20 elements
    cout << "Enter elements of the set: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    // Sort the array to handle duplicates easily
    // Simple bubble sort (since we can’t use <algorithm>)
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }

    int totalSubsets = 1 << n; // 2^n subsets
    cout << "\nAll distinct subsets:\n";

    // We’ll store previously printed subsets to avoid duplicates (basic way)
    string printed[1000]; 
    int printedCount = 0;

    for (int mask = 0; mask < totalSubsets; mask++) {
        string subset = "{ ";
        bool first = true;

        for (int i = 0; i < n; i++) {
            if (mask & (1 << i)) {
                if (!first) subset += ", ";
                subset += to_string(arr[i]);
                first = false;
            }
        }
        subset += " }";

        // Check if this subset was already printed (avoid duplicates)
        bool alreadyPrinted = false;
        for (int k = 0; k < printedCount; k++) {
            if (printed[k] == subset) {
                alreadyPrinted = true;
                break;
            }
        }

        if (!alreadyPrinted) {
            printed[printedCount++] = subset;
            cout << subset << endl;
        }
    }

    return 0;
}
//Input-->Enter number of elements: 3
         //Enter elements of the set: 1 2 3
//Output-->All distinct subsets:
{  }
{ 1 }
{ 2 }
{ 3 }
{ 1, 2 }
{ 1, 3 }
{ 2, 3 }
{ 1, 2, 3 }



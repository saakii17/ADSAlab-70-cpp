//Develop and implement a solution for the given problem using the Backtracking approach.
#include <iostream>
using namespace std;

// Recursive function to generate subsets
void generateSubsets(int arr[], int n, int index, int subset[], int subsetSize) {
    // Print current subset
    cout << "{ ";
    for (int i = 0; i < subsetSize; i++) {
        cout << subset[i];
        if (i != subsetSize - 1) cout << ", ";
    }
    cout << " }" << endl;

    for (int i = index; i < n; i++) {
        // Skip duplicates
        if (i > index && arr[i] == arr[i - 1]) continue;

        subset[subsetSize] = arr[i];              // Include arr[i]
        generateSubsets(arr, n, i + 1, subset, subsetSize + 1); // Recurse
    }
}

int main() {
    int n;
    cout << "Enter number of elements: ";
    cin >> n;

    int arr[20];
    cout << "Enter elements of the set: ";
    for (int i = 0; i < n; i++) cin >> arr[i];

    // Sort array using simple bubble sort to handle duplicates
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }

    int subset[20]; // temporary array to store current subset
    cout << "\nAll distinct subsets:\n";
    generateSubsets(arr, n, 0, subset, 0);

    return 0;
}
//Input-->Enter number of elements: 3
         //Enter elements of the set: 1 2 2
//Output-->All distinct subsets:
{  }
{ 1 }
{ 1, 2 }
{ 1, 2, 2 }
{ 2 }
{ 2, 2 }

